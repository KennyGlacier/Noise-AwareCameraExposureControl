function Test_nelder_mead_AE (Path_UpsampledData)
%% Camera Exposure Control for Robust Robot Vision with Noise-Aware Image Assessment Metric
%
% Ukcheol Shin, Jinsun Park, Gyumin Shim, Francois Rameau, and In So Kweon
%
% IROS 2019
%
% Please feel free to contact if you have any problems.
% 
% E-mail : Ukcheol Shin (shinwc159@gmail.com / shinwc159@kaist.ac.kr)
%          Robotics and Computer Vision Lab., EE,
%          KAIST, Republic of Korea
%
% Project Page : https://sites.google.com/view/noise-aware-exposure-control
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Name   : 
%    Run_NelderMead_ExposureControl.m
%
%  Modified:
%
%    17 December 2019
%
%  Author:
%
%    Ukcheol Shin
%
%  Reference:
%    
%   We refer and modify the matlab code written by Jeff Borggaard 
%   "https://people.sc.fsu.edu/~jburkardt/m_src/nelder_mead/nelder_mead.html".
%   the paper reference is follows : 
%    
%    John Nelder, Roger Mead,
%    A simplex method for function minimization,
%    Computer Journal,
%    Volume 7, Number 4, January 1965, pages 308-313.
%
%  Parameters:
%
%  Input    : Path_UpsampledData  -  Path of upsampled dataset file, 
%                                             this dataset is generated by
%                                             "Extract_Result.m" file
%  output  : None
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    close all;
    
    fprintf ( 1, '\n' );
    fprintf ( 1, 'AE_NELDER_MEAD_TEST:\n' );

    % Load saved result mat file
    load(Path_UpsampledData, 'path_name', 'dataset_flag');

    n = 2;
    Alpha = 1.7;   % Alpha decides the initial simplex size
    flag_draw = true;
    Flag_Dataset = dataset_flag; % Flag to select the setting for dataset type.
    
    %% 1. Construct initial simplex
    % Generate random initial point
    if(Flag_Dataset == 0) % Outdoor dataset  
      Init_Points = zeros(3,2);
      Init_Points(1,1) = 2*(randi(11)-1); 
      Init_Points(1,2) = 150*(randi(50)-1) + 100;      
    elseif(Flag_Dataset == 1) % Indoor dataset
      Init_Points = zeros(3,2);
      Init_Points(1,1) = 1*(randi(25)-1);
      Init_Points(1,2) = 3000*(randi(22)-1) + 4000;
    end

    % Read initial image based on random generated point
    Str_Init_Img = strcat('Param-ISO-',int2str(Init_Points(1,1)), '-ExpT-',int2str(Init_Points(1,2)), '.jpg');
    Path_Init_Img = strcat(path_name,'\',Str_Init_Img);
    Initial_image = imread(Path_Init_Img);

    % Decide exporing points based on a intensity of current captured image.
    Intensity = mean2(rgb2gray(Initial_image));

    if(Intensity >= 128)
      h = -1/Alpha*(Intensity/255);
    elseif(Intensity < 128)
      h = Alpha*(1 - Intensity/255);
    end

    Init_Points(2,:) = FindClosestPoint(Init_Points(1,:).*(1 + h*[1,0]), Flag_Dataset);
    Init_Points(3,:) = FindClosestPoint(Init_Points(1,:).*(1 + h*[0,1]), Flag_Dataset);
    fprintf(1,'Initial Param   : Gain : %d, ExpT : %d\n', Init_Points(1,1), Init_Points(1,2) );
    fprintf(1,'Second Param : Gain : %d, ExpT : %d\n', Init_Points(2,1), Init_Points(2,2) );
    fprintf(1,'Third Param    : Gain : %d, ExpT : %d\n', Init_Points(3,1), Init_Points(3,2) );

    %% 2. Run Nelder-Mead based Exposure Control Algorithm

    fprintf ( 1, '\n' );
    fprintf ( 1, '  Initial data:\n' );
    fprintf ( 1, '\n' );

    for j = 1 : n
    fprintf ( 1, '  ---X(%d)---', j );
    end
    fprintf ( 1, '  ---F(X)---\n' );
    fprintf ( 1, '\n' );
    Metric_our( zeros(1,2) , Path_UpsampledData); % initialize
    
    [ xopt, n_feval ] = nelder_mead_AE ( Init_Points, @Metric_our, flag_draw , Path_UpsampledData);

    fprintf ( 1, '\n' );
    fprintf ( 1, '  Computed optimum after %d evaluations:\n', n_feval );
    fprintf ( 1, '\n' );
    for j = 1 : n
    fprintf ( 1, '  ---X(%d)---', j );
    end
    fprintf ( 1, '  ---F(X)---\n' );
    fprintf ( 1, '\n' );
    for j = 1 : n
    fprintf ( 1, '  %10f', xopt(j) );
    end
    fprintf ( 1, '  %10e\n', Metric_our ( xopt) );

    %% 3. Display the Gain & ExpT trajectory
    Result = importdata(strcat(Path_UpsampledData(1:regexp(Path_UpsampledData,'workspace')-1), 'Traj_ExpTGain.txt'));

    Result = Result(4:end,:);
    t = 1:length(Result);
    GainResult = Result(:,1);
    ExpTResult = Result(:,2);

    figure;
    plot(t,GainResult,'LineWidth',2.5); 
    set(gca,'FontName', 'Times New Roman','FontSize',17);
    xlabel('Step','fontsize',20, 'fontweight','bold'); ylabel('Gain','fontsize',20, 'fontweight','bold');  grid on; %title('Gain-step graph');
    tt = [1,5,15,25,35,45];  hold on;
    plot(tt,GainResult(tt),'r*');

    figure;
    plot(t,ExpTResult,'LineWidth',2.5); 
    set(gca,'FontName', 'Times New Roman','FontSize',17);
    xlabel('Step','fontsize',20, 'fontweight','bold'); ylabel('ExpT','fontsize',20, 'fontweight','bold');  grid on; %title('ExpT-step graph');
    tt = [1,5,15,25,35,45];  hold on;
    plot(tt,ExpTResult(tt),'r*');

return
end
